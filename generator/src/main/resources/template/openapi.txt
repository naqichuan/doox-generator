/*
 * Copyright [(${#dates.format(date, 'yyyy')})] nqcx.org All right reserved. This software is the confidential and proprietary information
 * of nqcx.org ("Confidential Information"). You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement you entered into with nqcx.org.
 */

package [(${package})];
[# th:each="import : ${imports}"]
import [(${import})];
[/]
/**
 * @author [(${author})] [(${#dates.format(date, 'yyyy-MM-dd HH:mm')})]
 */
@RestController
@RequestMapping("/open/[(${tableName})]")
public class [(${name})] extends AbstractController {

//    private final [(${serviceName})] [(${serviceVariable})];

//    public [(${name})]([(${serviceName})] [(${serviceVariable})]) {
//        this.[(${serviceVariable})] = [(${serviceVariable})];
//    }

//    /**
//     * list
//     *
//     * @param [(${serviceVOVariable})] vo
//     * @return Map
//     */
//    @RequestMapping(value = "/list", method = {RequestMethod.GET, RequestMethod.POST},
//            produces = "application/json")
//    public DTO list([(${serviceVO})] [(${serviceVOVariable})]) {
//        if ([(${serviceVOVariable})].getPage() == null)
//            [(${serviceVOVariable})].setPage(1L);
//
//        DTO dto = [(${serviceVariable})].findAll([(${serviceVOVariable})].vo2dto());
//
//        List<[(${serviceVO})]> list = dto.getList();
//        if (list != null)
//            dto.setList(Orika.l2l(list, [(${serviceVO})].class));
//
//        return dto;
//    }

//    /**
//     * save new
//     *
//     * @param [(${serviceVOVariable})] [(${serviceVOVariable})]
//     * @return Map
//     */
//    @PutMapping(value = "/save", produces = "application/json")
//    public DTO save(@RequestBody [(${serviceVO})] [(${serviceVOVariable})]) {
//        DTO dto = checkForm([(${serviceVOVariable})], false);
//        if (dto == null || !dto.isSuccess())
//            return Optional.ofNullable(dto).orElse(new DTO());
//
//        return new DTO(true).setObject([(${serviceVariable})].save([(${serviceVOVariable})]));
//    }

//    /**
//     * 详细
//     *
//     * @param id id
//     * @return Map
//     */
//    @GetMapping(value = "/detail/{id}", produces = "application/json")
//    public DTO detail(@PathVariable("id") [(${idType})] id) {
//        return new DTO(true).setObject([(${serviceVariable})].findById(id));
//    }

//    /**
//     * edit
//     *
//     * @param id id
//     * @return Map
//     */
//    @GetMapping(value = "/edit/{id}", produces = "application/json")
//    public DTO edit(@PathVariable("id") [(${idType})] id) {
//        return detail(id);
//    }

//    /**
//     * modify
//     *
//     * @param [(${serviceVOVariable})] [(${serviceVOVariable})]
//     * @return Map
//     */
//    @PutMapping(value = "/modify", produces = "application/json")
//    public DTO modify(@RequestBody [(${serviceVO})] [(${serviceVOVariable})]) {
//        DTO dto = checkForm([(${serviceVOVariable})], true);
//        if (dto == null || !dto.isSuccess())
//            return Optional.ofNullable(dto).orElse(new DTO());
//
//        return new DTO(true).setObject([(${serviceVariable})].modify([(${serviceVOVariable})]));
//    }

//    /**
//     * check from
//     *
//     * @return DTO
//     */
//    private DTO checkForm([(${serviceVO})] [(${serviceVOVariable})], boolean isModify) {
//        DTO dto = new DTO();
//
//        if ([(${serviceVOVariable})] == null)
//            return dto.putError(NErrorCode.E1.buildError()); // 参数异常
//        if (isModify && [(${serviceVOVariable})].getId() == 0)
//            return dto.putError(NErrorCode.E3.buildError()); // 数据为空或不存在
//
//        return dto.setSuccess(true);
//    }

//    /**
//     * delete
//     *
//     * @param ids ids
//     * @return Map
//     */
//    @DeleteMapping(value = "/delete", produces = "application/json")
//    public DTO delete([(${idType})][] ids) {
//        if (ids != null && ids.length > 0)
//            [(${serviceVariable})].deleteByIds(ids);
//
//        return new DTO(true);
//    }
}
