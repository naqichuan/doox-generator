/*
 * Copyright [(${#dates.format(date, 'yyyy')})] nqcx.org All right reserved. This software is the confidential and proprietary information
 * of nqcx.org ("Confidential Information"). You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement you entered into with nqcx.org.
 */

package [(${package})];
[# th:each="import : ${imports}"]
import [(${import})];
[/]
/**
 * @author [(${author})] [(${#dates.format(date, 'yyyy-MM-dd HH:mm')})]
 */
public class [(${name})] extends BaseServiceTest {

    @Autowired
    private [(${serviceName})] [(${serviceVariable})];

    @Test
    public void save() {
        [(${poName})] po = new [(${poName})]();
[# th:each="dg : ${poSetters}"]
        [(${dg})][/]

        [(${serviceVariable})].save(po);
    }

    @Test
    public void saveAll() {
        [(${poName})] po;
        List<[(${poName})]> list = new ArrayList<>();

        for (int i = 0; i < 1000; i++) {
            list.add(po = new [(${poName})]());
[# th:each="dg : ${poSetters}"]
            [(${dg})][/]
        }

        [(${serviceVariable})].saveAll(list);
    }

    @Test
    public void modify() {
        [(${poName})] po = new [(${poName})]();
[# th:each="dg : ${poSetters}"]
        [(${dg})][/]

        [(${serviceVariable})].modify(po);
    }

    @Test
    public void modifyAll() {
        [(${poName})] po;
        List<[(${poName})]> list = new ArrayList<>();

        list.add(po = new [(${poName})]());
[# th:each="dg : ${poSetters}"]
        [(${dg})][/]

        [(${serviceVariable})].modifyAll(list);
    }

    @Test
    public void findById() {
        [(${poName})] po = [(${serviceVariable})].findById(1[# th:if="${idType == 'Long'}"]L[/]);
        System.out.println(po);
    }

    @Test
    public void findAllByIds() {
        List<[(${idType})]> ids = Arrays.asList(2[# th:if="${idType == 'Long'}"]L[/], 3[# th:if="${idType == 'Long'}"]L[/], 4[# th:if="${idType == 'Long'}"]L[/], 5[# th:if="${idType == 'Long'}"]L[/]);
        List<[(${poName})]> list = [(${serviceVariable})].findAllByIds(ids);

        Optional.ofNullable(list)
                .ifPresent(l -> l.forEach(System.out::println));
    }

    @Test
    public void listAll() {
        DTO dto = new DTO();
        List<[(${poName})]> list = [(${serviceVariable})].listAll(dto);

        Optional.ofNullable(list)
                .ifPresent(l -> l.forEach(System.out::println));
    }

    @Test
    public void findAll() {
        // page and sort(field)
        DTO dtoRequest = new DTO()
                // .putParam("id", 1L)                                                  // 参数示例
                // .putParam("date_gt", "2021-07-22")                                   // 参数示例
                // .putParam("number_gt", 10L)                                          // 参数示例
                // .setPage(new NPage(1, 20))                                           // 写法以下一行等效
                .newPageWith(1L, 20L)
                //.setSort(NSort.by(new NSort.NOrder(NSort.NDirection.DESC, "id")))     // 写法以下一行等效
                .newSortsWith("id,desc");                                               // 排序字段写 PO 类里的 field name，不写数据库字段

        DTO dtoResult = [(${serviceVariable})].findAll(dtoRequest);

        if (dtoResult != null && dtoResult.getList() != null)
            dtoResult.getList().forEach(System.out::println);

        System.out.println(dtoResult);
    }

    @Test
    public void getCount() {
        DTO dtoRequest = new DTO();

        long count = [(${serviceVariable})].getCount(dtoRequest);

        System.out.println(count);
    }

    @Test
    public void deleteById() {
        [(${serviceVariable})].deleteById(6[# th:if="${idType == 'Long'}"]L[/]);
    }

    @Test
    public void deleteByIds() {
        List<[(${idType})]> ids = Arrays.asList(7[# th:if="${idType == 'Long'}"]L[/], 8[# th:if="${idType == 'Long'}"]L[/]);
        [(${serviceVariable})].deleteByIds(ids);
    }
}
