<template>
  <div>
    <Card class="clearfix">
      <div class="search-con search-con-top">
        <Form ref="searchForm" inline class="search" :model="tableSearch" @submit.native.prevent>[# th:each="c : ${searchFields}"]
          <FormItem prop="[(${c})]">
            <Input type="text" style="width: 150px" placeholder="[(*{searchLabels[__${cStat.index}__]})]" v-model="tableSearch.[(${c})]"
                   @keyup.enter.native="handleTableData"></Input>
          </FormItem>[/]
          <FormItem>
            <Button type="dashed" icon="ios-refresh" @click="handleSearchRefresh">重置</Button>
          </FormItem>
          <FormItem>
            <Button type="primary" icon="ios-search" @click="handleTableData">查询</Button>
          </FormItem>
        </Form>
        <ButtonGroup>
          <Button icon="ios-add-circle" @click="handleNew">新建</Button>
        </ButtonGroup>
      </div>
      <tables ref="dataTable" v-model="tableData" :columns="tableTitle" :loading="tableLoading"
        @on-selection-change="handleTableSelectChange" @on-sort-change="handleTableSortChange"
        @on-delete="handleDelete" @on-edit="handleEdit"/>
      <div class="margin-top-10">
        <!-- 选中提示 -->
        <Row>
          <Alert show-icon>
            已选择 <span class="select-count"></span>{{ tableSelectionCount }} 项
            <a href="#" @click.prevent="handleTableSelectAll(true)"> 全部选择 </a>
            <a href="#" @click.prevent="handleTableSelectAll(false)"> 全部取消 </a>
          </Alert>
        </Row>
        <!--分页条-->
        <Row class="operation">
          <Poptip confirm transfer title="确定要删除选中的数据吗？" @on-ok="handleDeleteAll">
            <Button icon="ios-trash">批量删除</Button>
          </Poptip>
           <Page ref="tablePage" :total="tablePage.totalCount" :page-size="tablePage.pageSize" :current="tablePage.page"
            show-total placement="top" style="float: right" @on-change="handleTablePageChange"></Page>
        </Row>
      </div>
    </Card>
    <Modal v-model="newModal" :closable='false' :mask-closable=false :width="600"
           :loading="newLoading" okText="保存" @on-ok="handleNewSave">
      <h3 slot="header" style="color:#2D8CF0">新建</h3>
      <Form ref="newForm" :model="newForm" :label-width="100" :rules="newValidate">[# th:each="c : ${newFormFields}"]
        <FormItem label="[(*{newFormLabels[__${cStat.index}__]})]" prop="[(${c})]">
          <Input v-model="newForm.[(${c})]" placeholder="[(*{newFormLabels[__${cStat.index}__]})]" style="width: 400px"></Input>
        </FormItem>[/]
      </Form>
    </Modal>
    <Modal v-model="editModal" :closable='false' :mask-closable=false :width="600"
           :loading="editLoading" okText="保存修改" @on-ok="handleEditSave">
      <h3 slot="header" style="color:#2D8CF0">编辑</h3>
      <Form ref="editForm" :model="editForm" :label-width="100" :rules="editValidate">[# th:each="c : ${editFormFields}"]
        <FormItem label="[(*{editFormLabels[__${cStat.index}__]})]" prop="[(${c})]">
          <Input v-model="editForm.[(${c})]" placeholder="[(*{editFormLabels[__${cStat.index}__]})]" style="width: 400px"></Input>
        </FormItem>[/]
      </Form>
    </Modal>
  </div>
</template>

<script>
import Tables from '_c/tables'
import { [(${camelTableName})]List, [(${camelTableName})]Save, [(${camelTableName})]Edit, [(${camelTableName})]Modify, [(${camelTableName})]Delete } from '[(${apiPath})]'

export default {
  name: '[(${camelTableName})]',
  components: {
    Tables
  },
  data () {
    return {
      bools: [
        { name: 'FALSE', text: '否' },
        { name: 'TRUE', text: '是' }
      ],
      statuss: [
        { name: 'NONE', text: '无' },
        { name: 'AVAILABLE', text: '可用' },
        { name: 'DISABLE', text: '不可用' },
        { name: 'DELETED', text: '已删除' }
      ],
      genders: [
        { name: 'NONE', text: '' },
        { name: 'MALE', text: '男' },
        { name: 'FEMALE', text: '女' }
      ],
      tableSearch: {},
      tablePage: {},
      tableSorts: [],
      tableTitle: [
        { type: 'selection', align: 'center' }, // 这里是复选框
        { title: '[(${idFieldTitle})]', key: '[(${idFieldName})]', sortable: 'custom', align: 'center' }[# th:each="c : ${tableTitleTitles}"],
        { title: '[(${c})]', key: '[(*{tableTitleKeys[__${cStat.index}__]})]', tooltip: true }[/],
        { title: 'Handle', key: 'handle', align: 'center', options: ['edit', 'delete'] }
      ],
      tableData: [],
      tableLoading: false,
      tableSelections: [],
      tableSelectionCount: 0,

      newModal: false,
      newLoading: true,
      newForm: { [# th:each="c : ${newFormFields}"][# th:if="${cStat.index > 0}"], [/][(${c})]: ''[/] },
      newValidate: {[# th:each="c : ${validateFields}"][# th:if="${cStat.index > 0}"],[/]
        [(${c})]: [
          { required: true, message: '不能空', trigger: 'blur' }
        ][/]
      },

      editModal: false,
      editLoading: true,
      editForm: { [(${idFieldName})]: 0[# th:each="c : ${editFormFields}"], [(${c})]: ''[/] },
      editValidate: {[# th:each="c : ${validateFields}"][# th:if="${cStat.index > 0}"],[/]
        [(${c})]: [
          { required: true, message: '不能空', trigger: 'blur' }
        ][/]
      }
    }
  },
  methods: {
    tableSearchParam () { // 查询参数
      let param = {}
      let tableSearch = this.tableSearch[# th:each="c : ${searchFields}"]
      if (tableSearch.[(${c})]) param = Object.assign(param, { [(${c})]: tableSearch.[(${c})] })[/]
      return param
    },
    handleSearchInitiate () {
      this.handleSearchRefresh()

      this.tablePage.page = 1
      this.tablePage.pageSize = 20
      this.tablePage.totalCount = 0

      this.tableSorts = []
    },
    handleSearchRefresh () {
      this.tableSearch = { [# th:each="c : ${searchFields}"][# th:if="${cStat.index > 0}"], [/][(${c})]: ''[/] }
    },
    handleTableData () { // 加载数据
      let _this = this
      _this.tableLoading = true

      // 更新选中
      _this.handleTableSelectChange([])

      let param = this.tableSearchParam()
      if (this.tablePage) { param = Object.assign(param, { 'page': this.tablePage.page, 'pageSize': this.tablePage.pageSize }) }
      if (this.tableSorts && this.tableSorts.length > 0) { param = Object.assign(param, { 'sorts': this.tableSorts.join(';') }) }

      [(${camelTableName})]List(param).then(res => {
        const data = res.data
        if (data && data.success) {
          _this.tableData = data.list
          _this.tablePage.current = data.page
          _this.tablePage.pageSize = data.pageSize
          _this.tablePage.totalCount = data.totalCount
        } else {
          let em = ''
          if (data && data.errorText) { em = '，' + data.errorText }
          _this.$Message.error({
            content: '查询失败，请稍后重试' + em + '！',
            closable: true
          })
        }
        _this.tableLoading = false
      })
    },
    handleTablePageChange (page) { // 变更页码
      this.tablePage.page = page
      this.handleTableData()
    },
    handleTableSortChange (sort) { // 变更排序
      this.tableSorts = []
      if (sort && (sort.order === 'desc' || sort.order === 'asc')) { this.tableSorts.push(sort.key + ',' + sort.order) }
      this.handleTableData()
    },
    handleTableSelectChange (selection) { // 变更选中
      this.tableSelectionCount = 0
      this.tableSelections = []

      this.tableSelectionCount = selection.length
      for (let i = 0; i < this.tableSelectionCount; i++) {
        this.tableSelections.push(selection[i].id)
      }
    },
    handleTableSelectAll (status) {
      this.$refs.dataTable.selectAll(status)
    },
    handleDelete ({ row }) { // 列表操作-数据删除
      let _this = this

      [(${camelTableName})]Delete([row.id]).then(res => {
        const data = res.data
        if (data && data.success) {
          _this.$Message.success('删除成功')
          _this.handleTableData()
        } else {
          let em = '删除失败!'
          if (data && data.errorText) { em = data.errorText }
          _this.$Message.error({
            content: em,
            closable: true
          })
        }
      })
    },
    handleDeleteAll () { // 批量操作-批量删除
      let _this = this

      if (_this.tableSelections.length === 0) {
        _this.$Message.error('请选择要删除的数据……')
        return
      }

      [(${camelTableName})]Delete(_this.tableSelections).then(res => {
        const data = res.data
        if (data && data.success) {
          _this.$Message.success('删除成功')
          _this.handleTableData()
        } else {
          let em = '删除失败!'
          if (data && data.errorText) { em = data.errorText }
          _this.$Message.error({
            content: em,
            closable: true
          })
        }
      })
    },
    handleNew () { // 新建页面
      this.$refs.newForm.resetFields()
      this.newModal = true
    },
    handleNewSave () { // 页面提交-新建保存
      this.$refs.newForm.validate((valid) => {
        let _this = this
        if (valid) {
          [(${camelTableName})]Save(_this.newForm).then(res => {
            const data = res.data
            if (data && data.success) {
              _this.$Message.success({
                content: '保存成功',
                closable: true
              })
              _this.newModal = false
              _this.newLoading = false
              _this.handleTableData()
            } else {
              let em = '保存失败!'
              if (data && data.errorText) { em = data.errorText }
              _this.$Message.error({
                content: em,
                closable: true
              })

              setTimeout(() => {
                _this.newLoading = false
                _this.$nextTick(() => {
                  _this.newLoading = true
                })
              }, 1000)
            }
          }).catch(function (error) {
            console.error(error)
            _this.newLoading = false
          })
        } else {
          setTimeout(() => {
            _this.newLoading = false
            _this.$nextTick(() => {
              _this.newLoading = true
            })
          }, 1000)
        }
      })
    },
    handleEdit ({ row }) { // 编辑页面
      this.$refs.editForm.resetFields()
      this.editDetail(row.id)
    },
    editDetail (id) { // 页面操作-数据编辑
      let _this = this

      [(${camelTableName})]Edit(id).then(res => {
        const data = res.data
        if (data && data.success) {
          for (let item of Object.keys(_this.editForm)) {
            _this.editForm[item] = data.object[item]
          }
          _this.editModal = true
        } else {
          let em = '获取信息失败!'
          if (data && data.errorText) { em = data.errorText }
          _this.$Message.error({
            content: em,
            closable: true
          })
        }
      })
    },
    handleEditSave () { // 页面提交-保存修改
      this.$refs.editForm.validate((valid) => {
        let _this = this
        if (valid) {
          [(${camelTableName})]Modify(_this.editForm).then(res => {
            const data = res.data
            if (data && data.success) {
              _this.$Message.success({
                content: '保存修改成功',
                closable: true
              })
              _this.editModal = false
              _this.editLoading = false
              _this.handleTableData()
            } else {
              let em = '保存修改失败!'
              if (data && data.errorText) { em = data.errorText }
              _this.$Message.error({
                content: em,
                closable: true
              })

              setTimeout(() => {
                _this.editLoading = false
                _this.$nextTick(() => {
                  _this.editLoading = true
                })
              }, 1000)
            }
          }).catch(function (error) {
            console.error(error)
            _this.editLoading = false
          })
        } else {
          setTimeout(() => {
            _this.editLoading = false
            _this.$nextTick(() => {
              _this.editLoading = true
            })
          }, 1000)
        }
      })
    }
  },
  created () {
    this.handleSearchInitiate()
  },
  mounted () {
    this.handleTableData()
  }
}
</script>

<style lang="less">
  @import "../../../assets/styles/common.less";
</style>
