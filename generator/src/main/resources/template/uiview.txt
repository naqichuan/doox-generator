<template>
  <div>
    <Card class="clearfix">
      <div class="search-con search-con-top">
        <Form ref="[(${lowerCamelTableName})]SearchForm" inline class="search" :model="[(${lowerCamelTableName})]TableSearch" @submit.native.prevent>[# th:each="c : ${searchFields}"]
          <FormItem prop="[(${c})]">
            <Input type="text" style="width: 150px" placeholder="[(*{searchLabels[__${cStat.index}__]})]" v-model="[(${lowerCamelTableName})]TableSearch.[(${c})]"
                   @keyup.enter.native="handle[(${upperCamelTableName})]TableData"></Input>
          </FormItem>[/]
          <FormItem>
            <Button type="dashed" icon="ios-refresh" @click="handle[(${upperCamelTableName})]SearchRefresh">重置</Button>
          </FormItem>
          <FormItem>
            <Button type="primary" icon="ios-search" @click="handle[(${upperCamelTableName})]TableData">查询</Button>
          </FormItem>
        </Form>
        <ButtonGroup>
          <Button icon="ios-add-circle" @click="handle[(${upperCamelTableName})]New">新建</Button>
        </ButtonGroup>
      </div>
      <tables ref="[(${lowerCamelTableName})]DataTable" v-model="[(${lowerCamelTableName})]TableData" :columns="[(${lowerCamelTableName})]TableTitle" :loading="[(${lowerCamelTableName})]TableLoading"
        @on-selection-change="handle[(${upperCamelTableName})]TableSelectChange" @on-sort-change="handle[(${upperCamelTableName})]TableSortChange"
        @on-delete="handle[(${upperCamelTableName})]Delete" @on-edit="handle[(${upperCamelTableName})]Edit"/>
      <div class="margin-top-10">
        <!-- 选中提示 -->
        <Row>
          <Alert show-icon>
            已选择 <span class="select-count"></span>{{ [(${lowerCamelTableName})]TableSelectionCount }} 项
          </Alert>
        </Row>
        <!--分页条-->
        <Row class="operation">
          <Poptip confirm transfer title="确定要删除选中的数据吗？" @on-ok="handle[(${upperCamelTableName})]DeleteAll">
            <Button icon="ios-trash">批量删除</Button>
          </Poptip>
           <Page ref="[(${lowerCamelTableName})]TablePage" :total="[(${lowerCamelTableName})]TablePage.totalCount" :page-size="[(${lowerCamelTableName})]TablePage.pageSize" :current="[(${lowerCamelTableName})]TablePage.page"
            show-total placement="top" style="float: right" @on-change="handle[(${upperCamelTableName})]TablePageChange"></Page>
        </Row>
      </div>
    </Card>
    <Modal v-model="[(${lowerCamelTableName})]NewModal" :closable='false' :mask-closable=false :width="600"
           :loading="[(${lowerCamelTableName})]NewLoading" okText="保存" @on-ok="handle[(${upperCamelTableName})]NewSave">
      <h3 slot="header" style="color:#2D8CF0">新建</h3>
      <Form ref="[(${lowerCamelTableName})]NewForm" :model="[(${lowerCamelTableName})]NewForm" :label-width="100" :rules="[(${lowerCamelTableName})]NewValidate">[# th:each="c : ${newFormFields}"]
        <FormItem label="[(*{newFormLabels[__${cStat.index}__]})]" prop="[(${c})]">
          <Input v-model="[(${lowerCamelTableName})]NewForm.[(${c})]" placeholder="[(*{newFormLabels[__${cStat.index}__]})]" style="width: 400px"></Input>
        </FormItem>[/]
      </Form>
    </Modal>
    <Modal v-model="[(${lowerCamelTableName})]EditModal" :closable='false' :mask-closable=false :width="600"
           :loading="[(${lowerCamelTableName})]EditLoading" okText="保存修改" @on-ok="handle[(${upperCamelTableName})]EditSave">
      <h3 slot="header" style="color:#2D8CF0">编辑</h3>
      <Form ref="[(${lowerCamelTableName})]EditForm" :model="[(${lowerCamelTableName})]EditForm" :label-width="100" :rules="[(${lowerCamelTableName})]EditValidate">[# th:each="c : ${editFormFields}"]
        <FormItem label="[(*{editFormLabels[__${cStat.index}__]})]" prop="[(${c})]">
          <Input v-model="[(${lowerCamelTableName})]EditForm.[(${c})]" placeholder="[(*{editFormLabels[__${cStat.index}__]})]" style="width: 400px"></Input>
        </FormItem>[/]
      </Form>
    </Modal>
  </div>
</template>

<script>
import Tables from '_c/tables'
import { [(${lowerCamelTableName})]List, [(${lowerCamelTableName})]Save, [(${lowerCamelTableName})]Edit, [(${lowerCamelTableName})]Modify, [(${lowerCamelTableName})]Delete } from '[(${apiPath})]'

export default {
  name: '[(${lowerCamelTableName})]',
  components: {
    Tables
  },
  data () {
    return {
      bools: [
        { name: 'FALSE', text: '否' },
        { name: 'TRUE', text: '是' }
      ],
      statuss: [
        { name: 'NONE', text: '无' },
        { name: 'AVAILABLE', text: '可用' },
        { name: 'DISABLE', text: '不可用' },
        { name: 'DELETED', text: '已删除' }
      ],
      genders: [
        { name: 'NONE', text: '' },
        { name: 'MALE', text: '男' },
        { name: 'FEMALE', text: '女' }
      ],
      [(${lowerCamelTableName})]TableSearch: {},
      [(${lowerCamelTableName})]TablePage: {},
      [(${lowerCamelTableName})]TableSorts: [],
      [(${lowerCamelTableName})]TableTitle: [
        { type: 'selection', width: 50, align: 'center' }, // 这里是复选框
        { title: '[(${idFieldTitle})]', key: '[(${idFieldName})]', sortable: 'custom', width: 70, align: 'center' }[# th:each="c : ${tableTitleTitles}"],
        { title: '[(${c})]', key: '[(*{tableTitleKeys[__${cStat.index}__]})]', width: 100, tooltip: true }[/],
        { title: 'Handle', key: 'handle', width: 140, align: 'center', options: ['edit', 'delete'] }
      ],
      [(${lowerCamelTableName})]TableData: [],
      [(${lowerCamelTableName})]TableLoading: false,
      [(${lowerCamelTableName})]TableSelections: [],
      [(${lowerCamelTableName})]TableSelectionCount: 0,

      [(${lowerCamelTableName})]NewModal: false,
      [(${lowerCamelTableName})]NewLoading: true,
      [(${lowerCamelTableName})]NewForm: { [# th:each="c : ${newFormFields}"][# th:if="${cStat.index > 0}"], [/][(${c})]: ''[/] },
      [(${lowerCamelTableName})]NewValidate: {[# th:each="c : ${validateFields}"][# th:if="${cStat.index > 0}"],[/]
        [(${c})]: [
          { required: true, message: '不能空', trigger: 'blur' }
        ][/]
      },

      [(${lowerCamelTableName})]EditModal: false,
      [(${lowerCamelTableName})]EditLoading: true,
      [(${lowerCamelTableName})]EditForm: { [(${idFieldName})]: 0[# th:each="c : ${editFormFields}"], [(${c})]: ''[/] },
      [(${lowerCamelTableName})]EditValidate: {[# th:each="c : ${validateFields}"][# th:if="${cStat.index > 0}"],[/]
        [(${c})]: [
          { required: true, message: '不能空', trigger: 'blur' }
        ][/]
      }
    }
  },
  methods: {
    [(${lowerCamelTableName})]TableSearchParam () { // 查询参数
      let param = {}
      let tableSearch = this.[(${lowerCamelTableName})]TableSearch[# th:each="c : ${searchFields}"]
      if (tableSearch.[(${c})]) param = Object.assign(param, { [(${c})]: tableSearch.[(${c})] })[/]
      return param
    },
    handle[(${upperCamelTableName})]SearchInitiate () {
      this.handle[(${upperCamelTableName})]SearchRefresh()

      this.[(${lowerCamelTableName})]TablePage.page = 1
      this.[(${lowerCamelTableName})]TablePage.pageSize = 20
      this.[(${lowerCamelTableName})]TablePage.totalCount = 0

      this.[(${lowerCamelTableName})]TableSorts = []
    },
    handle[(${upperCamelTableName})]SearchRefresh () {
      this.[(${lowerCamelTableName})]TableSearch = { [# th:each="c : ${searchFields}"][# th:if="${cStat.index > 0}"], [/][(${c})]: ''[/] }
    },
    handle[(${upperCamelTableName})]TableData () { // 加载数据
      let _this = this
      _this.[(${lowerCamelTableName})]TableLoading = true

      // 更新选中
      _this.handle[(${upperCamelTableName})]TableSelectChange([])

      let param = this.[(${lowerCamelTableName})]TableSearchParam()
      if (this.[(${lowerCamelTableName})]TablePage) { param = Object.assign(param, { 'page': this.[(${lowerCamelTableName})]TablePage.page, 'pageSize': this.[(${lowerCamelTableName})]TablePage.pageSize }) }
      if (this.[(${lowerCamelTableName})]TableSorts && this.[(${lowerCamelTableName})]TableSorts.length > 0) { param = Object.assign(param, { 'sorts': this.[(${lowerCamelTableName})]TableSorts.join(';') }) }

      [(${lowerCamelTableName})]List(param).then(res => {
        const data = res.data
        if (data && data.success) {
          _this.[(${lowerCamelTableName})]TableData = data.list
          _this.[(${lowerCamelTableName})]TablePage.current = data.page
          _this.[(${lowerCamelTableName})]TablePage.pageSize = data.pageSize
          _this.[(${lowerCamelTableName})]TablePage.totalCount = data.totalCount
        } else {
          let em = ''
          if (data && data.errorText) { em = '，' + data.errorText }
          _this.$Message.error({
            content: '查询失败，请稍后重试' + em + '！',
            closable: true
          })
        }
        _this.[(${lowerCamelTableName})]TableLoading = false
      })
    },
    handle[(${upperCamelTableName})]TablePageChange (page) { // 变更页码
      this.[(${lowerCamelTableName})]TablePage.page = page
      this.handle[(${upperCamelTableName})]TableData()
    },
    handle[(${upperCamelTableName})]TableSortChange (sort) { // 变更排序
      this.[(${lowerCamelTableName})]TableSorts = []
      if (sort && (sort.order === 'desc' || sort.order === 'asc')) { this.[(${lowerCamelTableName})]TableSorts.push(sort.key + ',' + sort.order) }
      this.handle[(${upperCamelTableName})]TableData()
    },
    handle[(${upperCamelTableName})]TableSelectChange (selection) { // 变更选中
      this.[(${lowerCamelTableName})]TableSelectionCount = 0
      this.[(${lowerCamelTableName})]TableSelections = []

      this.[(${lowerCamelTableName})]TableSelectionCount = selection.length
      for (let i = 0; i < this.[(${lowerCamelTableName})]TableSelectionCount; i++) {
        this.[(${lowerCamelTableName})]TableSelections.push(selection[i].id)
      }
    },
    handle[(${upperCamelTableName})]Delete ({ row }) { // 列表操作-数据删除
      let _this = this

      [(${lowerCamelTableName})]Delete([row.id]).then(res => {
        const data = res.data
        if (data && data.success) {
          _this.$Message.success('删除成功')
          _this.handle[(${upperCamelTableName})]TableData()
        } else {
          let em = '删除失败!'
          if (data && data.errorText) { em = data.errorText }
          _this.$Message.error({
            content: em,
            closable: true
          })
        }
      })
    },
    handle[(${upperCamelTableName})]DeleteAll () { // 批量操作-批量删除
      let _this = this

      if (_this.[(${lowerCamelTableName})]TableSelections.length === 0) {
        _this.$Message.error('请选择要删除的数据……')
        return
      }

      [(${lowerCamelTableName})]Delete(_this.[(${lowerCamelTableName})]TableSelections).then(res => {
        const data = res.data
        if (data && data.success) {
          _this.$Message.success('删除成功')
          _this.handle[(${upperCamelTableName})]TableData()
        } else {
          let em = '删除失败!'
          if (data && data.errorText) { em = data.errorText }
          _this.$Message.error({
            content: em,
            closable: true
          })
        }
      })
    },
    handle[(${upperCamelTableName})]New () { // 新建页面
      this.$refs.[(${lowerCamelTableName})]NewForm.resetFields()
      this.[(${lowerCamelTableName})]NewModal = true
    },
    handle[(${upperCamelTableName})]NewSave () { // 页面提交-新建保存
      this.$refs.[(${lowerCamelTableName})]NewForm.validate((valid) => {
        let _this = this
        if (valid) {
          [(${lowerCamelTableName})]Save(_this.[(${lowerCamelTableName})]NewForm).then(res => {
            const data = res.data
            if (data && data.success) {
              _this.$Message.success({
                content: '保存成功',
                closable: true
              })
              _this.[(${lowerCamelTableName})]NewModal = false
              _this.handle[(${upperCamelTableName})]TableData()
            } else {
              let em = '保存失败!'
              if (data && data.errorText) { em = data.errorText }
              _this.$Message.error({
                content: em,
                closable: true
              })
            }
          }).catch(function (error) {
            console.error(error)
          })
        }

        setTimeout(() => {
          _this.[(${lowerCamelTableName})]NewLoading = false
          _this.$nextTick(() => {
            _this.[(${lowerCamelTableName})]NewLoading = true
          })
        }, 1000)
      })
    },
    handle[(${upperCamelTableName})]Edit ({ row }) { // 编辑页面
      this.$refs.[(${lowerCamelTableName})]EditForm.resetFields()
      this.[(${lowerCamelTableName})]EditDetail(row.id)
    },
    [(${lowerCamelTableName})]EditDetail (id) { // 页面操作-数据编辑
      let _this = this

      [(${lowerCamelTableName})]Edit(id).then(res => {
        const data = res.data
        if (data && data.success) {
          for (let item of Object.keys(_this.[(${lowerCamelTableName})]EditForm)) {
            if (data.object && data.object[item]) { _this.[(${lowerCamelTableName})]EditForm[item] = data.object[item] }
          }
          _this.[(${lowerCamelTableName})]EditModal = true
        } else {
          let em = '获取信息失败!'
          if (data && data.errorText) { em = data.errorText }
          _this.$Message.error({
            content: em,
            closable: true
          })
        }
      })
    },
    handle[(${upperCamelTableName})]EditSave () { // 页面提交-保存修改
      this.$refs.[(${lowerCamelTableName})]EditForm.validate((valid) => {
        let _this = this
        if (valid) {
          [(${lowerCamelTableName})]Modify(_this.[(${lowerCamelTableName})]EditForm).then(res => {
            const data = res.data
            if (data && data.success) {
              _this.$Message.success({
                content: '保存修改成功',
                closable: true
              })
              _this.[(${lowerCamelTableName})]EditModal = false
              _this.handle[(${upperCamelTableName})]TableData()
            } else {
              let em = '保存修改失败!'
              if (data && data.errorText) { em = data.errorText }
              _this.$Message.error({
                content: em,
                closable: true
              })
            }
          }).catch(function (error) {
            console.error(error)
          })
        }

        setTimeout(() => {
          _this.[(${lowerCamelTableName})]EditLoading = false
          _this.$nextTick(() => {
            _this.[(${lowerCamelTableName})]EditLoading = true
          })
        }, 1000)
      })
    }
  },
  created () {
    this.handle[(${upperCamelTableName})]SearchInitiate()
  },
  mounted () {
    this.handle[(${upperCamelTableName})]TableData()
  }
}
</script>

<style lang="less">
  @import "../../../assets/styles/common.less";
</style>
