/*
 * Copyright [(${#dates.format(date, 'yyyy')})] nqcx.org All right reserved. This software is the confidential and proprietary information
 * of nqcx.org ("Confidential Information"). You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement you entered into with nqcx.org.
 */

package [(${package})];
[# th:each="import : ${imports}"]
import [(${import})];
[/]
/**
 * @author [(${author})] [(${#dates.format(date, 'yyyy-MM-dd HH:mm')})]
 */
@Controller
@RequestMapping("/[(${tableName})]")
public class [(${name})] extends AbstractController {

    private final [(${serviceName})] [(${serviceVeriable})];

    public [(${name})]([(${serviceName})] [(${serviceVeriable})]) {
        this.[(${serviceVeriable})] = [(${serviceVeriable})];
    }

    /**
     * index
     *
     * @return ModelAndView
     */
    @GetMapping(value = {"", "/"})
    public ModelAndView index() {
        return new ModelAndView("/[(${tableName})]/[(${tableName})]");
    }

    /**
     * list
     *
     * @param [(${serviceVOVeriable})] vo
     * @return Map
     */
    @RequestMapping(value = "/list", method = {RequestMethod.GET, RequestMethod.POST},
            produces = "application/json")
    @ResponseBody
    public Map<?, ?> list([(${serviceVO})] [(${serviceVOVeriable})]) {
        if ([(${serviceVOVeriable})].getPage() == null)
            [(${serviceVOVeriable})].setPage(1L);

        DTO dto = [(${serviceVeriable})].findAll([(${serviceVOVeriable})].vo2dto());

        List<[(${serviceVO})]> list = dto.getList();
        if (list != null)
            dto.setList(Orika.l2l(list, [(${serviceVO})].class));

        return dto2map(dto);
    }

    /**
     * save new
     *
     * @param [(${serviceVOVeriable})] [(${serviceVOVeriable})]
     * @return Map
     */
    @PutMapping(value = "/save", produces = "application/json")
    @ResponseBody
    public Map<?, ?> save(@RequestBody [(${serviceVO})] [(${serviceVOVeriable})]) {
        DTO dto = checkForm([(${serviceVOVeriable})], false);
        if (dto == null || !dto.isSuccess())
            return dto2map(dto);

        return dto2map(new DTO(true).setObject([(${serviceVeriable})].save([(${serviceVOVeriable})])));
    }

    /**
     * 详细
     *
     * @param id id
     * @return Map
     */
    @GetMapping(value = "/detail/{id}", produces = "application/json")
    @ResponseBody
    public Map<?, ?> detail(@PathVariable("id") [(${idType})] id) {
        return dto2map(new DTO(true).setObject([(${serviceVeriable})].findById(id)));
    }

    /**
     * edit
     *
     * @param id id
     * @return Map
     */
    @GetMapping(value = "/edit/{id}", produces = "application/json")
    @ResponseBody
    public Map<?, ?> edit(@PathVariable("id") [(${idType})] id) {
        return detail(id);
    }

    /**
     * modify
     *
     * @param [(${serviceVOVeriable})] [(${serviceVOVeriable})]
     * @return Map
     */
    @PutMapping(value = "/modify", produces = "application/json")
    @ResponseBody
    public Map<?, ?> modify(@RequestBody [(${serviceVO})] [(${serviceVOVeriable})]) {
        DTO dto = checkForm([(${serviceVOVeriable})], true);
        if (dto == null || !dto.isSuccess())
            return dto2map(dto);

        return dto2map(new DTO(true).setObject([(${serviceVeriable})].modify([(${serviceVOVeriable})])));
    }

    /**
     * check from
     *
     * @return DTO
     */
    private DTO checkForm([(${serviceVO})] [(${serviceVOVeriable})], boolean isModify) {
        DTO dto = new DTO();

        if ([(${serviceVOVeriable})] == null)
            return dto.putResult("10", "操作数据出错"); //操作数据出错
        if (isModify && [(${serviceVOVeriable})].getId() == 0)
            return dto.putResult("11", "操作的数据不存在"); //操作的数据不存在

        return dto.setSuccess(true);
    }

    /**
     * delete
     *
     * @param ids ids
     * @return Map
     */
    @DeleteMapping(value = "/delete", produces = "application/json")
    @ResponseBody
    public Map<?, ?> delete([(${idType})][] ids) {
        if (ids != null && ids.length > 0)
            [(${serviceVeriable})].deleteByIds(ids);

        return dto2map(new DTO(true));
    }
}
