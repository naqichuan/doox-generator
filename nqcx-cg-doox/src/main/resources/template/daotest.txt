/*
 * Copyright [(${#dates.format(date, 'yyyy')})] nqcx.org All right reserved. This software is the confidential and proprietary information
 * of nqcx.org ("Confidential Information"). You shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement you entered into with nqcx.org.
 */

package [(${package})];
[# th:each="import : ${imports}"]
import [(${import})];
[/]
/**
 * @author [(${author})] [(${#dates.format(date, 'yyyy-MM-dd HH:mm')})]
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:beans.xml"})
@TestExecutionListeners({TransactionalTestExecutionListener.class, DependencyInjectionTestExecutionListener.class})
public class [(${name})] extends TestCase {

    @Autowired
    private [(${daoName})]<[(${poName})], [(${idType})]> [(${daoVeriable})];

    @Test
    public void save() {
        [(${poName})] po = new [(${poName})]();
[# th:each="pg : ${poSetters}"]
        [(${pg})][/]

        [(${daoVeriable})].save(po);
    }

    @Test
    public void saveAll() {
        [(${poName})] po;
        List<[(${poName})]> list = new ArrayList<>();

        for (int i = 0; i < 1000; i++) {
            list.add(po = new [(${poName})]());
[# th:each="pg : ${poSetters}"]
            [(${pg})][/]
        }

        [(${daoVeriable})].saveAll(list);
    }

    @Test
    public void modify() {
        [(${poName})] po = new [(${poName})]();
[# th:each="pg : ${poSetters}"]
        [(${pg})][/]

        [(${daoVeriable})].modify(po);
    }

    @Test
    public void modifyAll() {
        [(${poName})] po;
        List<[(${poName})]> list = new ArrayList<>();

        list.add(po = new [(${poName})]());
[# th:each="pg : ${poSetters}"]
        [(${pg})][/]

        [(${daoVeriable})].modifyAll(list);
    }

    @Test
    public void findById() {
        [(${poName})] poName = [(${daoVeriable})].findById(1[# th:if="${idType == 'Long'}"]L[/]).orElse(null);
        System.out.println(poName);
    }

    @Test
    public void findAllByIds() {
        List<[(${idType})]> ids = Arrays.asList(2[# th:if="${idType == 'Long'}"]L[/], 3[# th:if="${idType == 'Long'}"]L[/], 4[# th:if="${idType == 'Long'}"]L[/], 5[# th:if="${idType == 'Long'}"]L[/]);
        List<[(${poName})]> list = [(${daoVeriable})].findAllByIds(ids);

        if (list == null)
            System.out.println(list);

        list.forEach(System.out::println);
    }

    @Test
    public void listAll() {
        DTO dto = new DTO();
        List<[(${poName})]> list = [(${daoVeriable})].listAll(dto);

        if (list == null)
            System.out.println(list);

        list.forEach(System.out::println);
    }

    @Test
    public void findAll() {
        // page and sort
        // Jpa 排序指定的是 pojo field name，Mybatis 排序需要指定数据库字段名，该问题会在未来的版本中解决
        DTO dtoRequest = new DTO().setPage(new NPage(1, 20))
                .setSort(NSort.by(new NSort.NOrder(NSort.NDirection.DESC, "id"),
                        new NSort.NOrder(NSort.NDirection.ASC, "t_create")));

        DTO dtoResult = [(${daoVeriable})].findAll(dtoRequest);

        if (dtoResult != null && dtoResult.getList() != null) {
            dtoResult.getList().forEach(System.out::println);
        }

        System.out.println(dtoResult);
    }

    @Test
    public void getCount() {
        DTO dtoRequest = new DTO();

        long count = [(${daoVeriable})].getCount(dtoRequest);

        System.out.println(count);
    }

    @Test
    public void deleteById() {
        [(${daoVeriable})].deleteById(6[# th:if="${idType == 'Long'}"]L[/]);
    }

    @Test
    public void deleteByIds() {
        List<[(${idType})]> ids = Arrays.asList(7[# th:if="${idType == 'Long'}"]L[/], 8[# th:if="${idType == 'Long'}"]L[/]);
        [(${daoVeriable})].deleteByIds(ids);
    }
}
